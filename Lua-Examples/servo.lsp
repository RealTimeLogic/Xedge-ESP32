
This example is a direct copy of the following C code example
converted to Lua code.

https://github.com/espressif/esp-idf/blob/master/examples/peripherals/mcpwm/mcpwm_servo_control/main/mcpwm_servo_control_example.c

The example uses the Lua bindings generated by SWIG.

We have left the semicolons in the example (copied from the C code),
but note that semicolons are not needed when using Lua.

Also note that all C functions and definitions are prefixed with 'esp.'

See the introduction in the following tutorial on how to physically
connect a servo to the ESP32:
https://randomnerdtutorials.com/esp32-servo-motor-web-server-arduino-ide/
In short, the 3 cable servo connector:
Wire	Color
-------------
Power	Red
GND	Black, or brown
Signal	Yellow, orange, or white

A standard servo requires 4.8V so you need to connect the Servo's power to
5V on the ESP32. The signal pin goes to GPIO 25 (see details below)

You can start and stop the timer by refreshing the browser window (or
click the run button in the IDE).

Change 'gpioNum' in the code if you want to use a GPIO other than 25

<?lsp
response:setcontenttype"text/plain"

local gpioNum=25 -- You may have to change the GPIO number

local fmt=string.format
local function printf(s,...) tracep(false,5,fmt(s,...)) end

local SERVO_MIN_PULSEWIDTH=1000 --Minimum pulse width in microsecond
local SERVO_MAX_PULSEWIDTH=2000 --Maximum pulse width in microsecond
local SERVO_MAX_DEGREE=90 --Maximum angle in degree upto which servo can rotate

local function servo_per_degree_init( degree_of_rotation)
    return (SERVO_MIN_PULSEWIDTH + (((SERVO_MAX_PULSEWIDTH - SERVO_MIN_PULSEWIDTH) * (degree_of_rotation)) / (SERVO_MAX_DEGREE)));
end

-- The following function runs as a coroutine timer.
-- timer: https://realtimelogic.com/ba/doc/?url=lua.html#ba_timer
local function servo()
   esp.mcpwm_gpio_init(esp.MCPWM_UNIT_0, esp.MCPWM0A, gpioNum);
   local cfg=esp.mcpwm_config_t()
   cfg.frequency = 50;    --frequency = 50Hz, i.e. for every servo motor time period should be 20ms
   cfg.cmpr_a = 0;    --duty cycle of PWMxA = 0
   cfg.cmpr_b = 0;    --duty cycle of PWMxb = 0
   cfg.counter_mode = esp.MCPWM_UP_COUNTER;
   cfg.duty_mode = esp.MCPWM_DUTY_MODE_0;
   esp.mcpwm_init(esp.MCPWM_UNIT_0, esp.MCPWM_TIMER_0, cfg); --Configure PWM0A & PWM0B with above settings
   while true do
      for count=0, SERVO_MAX_DEGREE do
         local angle = servo_per_degree_init(count);
         printf("Angle of rotation: %d, pulse width: %dus", count, angle);
         esp.mcpwm_set_duty_in_us(esp.MCPWM_UNIT_0, esp.MCPWM_TIMER_0, esp.MCPWM_GEN_A, angle);
         coroutine.yield(true) -- Sleep
      end
   end
end

-- Persistent data can be saved in the 'page' table.
-- See the following for 'page' table information:
--  https://realtimelogic.com/ba/doc/?url=lua.html#CMDE
if page.timer then
   page.timer:cancel()
   page.timer=nil
   print"Stopping timer"
else
   page.timer=ba.timer(servo)
   page.timer:set(100)
   print"Starting timer"
end
?>
